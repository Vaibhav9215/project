const axios = require('axios');
const cheerio = require('cheerio')
//const express = require('express');
const fs = require('fs');
const xlsx = require("xlsx");
const path = require("path")
// const FilePath= path.join(__dirname, "total");
// const detail=path.join()
//dirCreater(FilePath);
//const puppeteer = require("puppeteer") 
let sheetName, total;
async function getPrice(){
    try{
        const surl = 'https://coinmarketcap.com/'
        const {data} = await axios({
            metohd: "GEt",
            url: surl,
        })
        const $ = cheerio.load(data)
        const elemSelector ='#__next > div.bywovg-1.sXmSU > div.main-content > div.sc-57oli2-0.comDeo.cmc-body-wrapper > div > div:nth-child(1) > div.h7vnx2-1.bFzXgL > table > tbody > tr'
        const keys= [
            'rank',
            'name' ,
            'price' ,
            'hr' ,
            'day',
            'marketCap' ,
            'volume' ,
            'circulatingSupply'
        ]


       // let teamPath = path.join(__dirname, "total", "keys");
        // directory create if not created
       // dirCreater(teamPath);
      //  let filePath = path.join(teamPath, keys + ".xlsx"); 
        //  let filePath= path.join(__dirname, "total", keys);
        //  dirCreater(filePath)
        //  excelWriter(FilePath, data, sheetName)
        //    let fiePath = path.join(filePath, keys + ".xlsx");
        //    // reads the content if file exists and returns an empty array file does not exist 
        //    let content = excelReader(fiePath, keys);
    
        $(elemSelector).each((parentIdx, parentElem)=> {
            let keyIdx= 0;
            const coinObj ={}
            if(parentIdx < 10){
                $(parentElem).children().each((childIdx, childElem) =>{
                    let tdValue = $(childElem).text()
                    if(keyIdx == 1 || keyIdx ==6){
                        tdValue= $('p:first-child' ,$(childElem).html()).text()
                    }
                if(tdValue){   
                    coinObj[keys[keyIdx]] = tdValue
                    
                    keyIdx++;
                    }
                })
                console.log(coinObj) 
          
            }
        })
       
        let teamPath = path.join(__dirname, "total", "keys");
        dirCreater(teamPath);
        let filePath = path.join(teamPath, "keys" + ".xlsx");
        dirCreater(filePath) 
        excelWriter(filePath, data, sheetName)
     //   let filePath = path.join(teamPath, bit + ".xlsx");
        
 } catch (err){
     console.log(err)
 }
}
getPrice()
let FolderPath = path.join(__dirname, "total");
if (!fs.existsSync(FolderPath)) {
  fs.mkdirSync(FolderPath);
}
  function dirCreater(filePath) {
              if (fs.existsSync(filePath) == false) {
        fs.mkdirSync(filePath);
    }
}
function excelWriter(filePath, data, sheetName) {
    // workbook create
    let newWB = xlsx.utils.book_new();
    // worksheet
    let newWS = xlsx.utils.json_to_sheet(data);
    xlsx.utils.book_append_sheet(newWB, newWS, "sheet-1");
    // excel file create 
    xlsx.writeFile(newWB, "abc.xlsx");
}
